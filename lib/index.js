// Generated by CoffeeScript 1.6.3
var IcedCoffeeScriptCompiler, capitalize, formatClassName, iced, sysPath;

iced = require('iced-coffee-script');

sysPath = require('path');

capitalize = function(string) {
  return (string[0] || '').toUpperCase() + string.slice(1);
};

formatClassName = function(filename) {
  return filename.split('_').map(capitalize).join('');
};

module.exports = IcedCoffeeScriptCompiler = (function() {
  IcedCoffeeScriptCompiler.prototype.brunchPlugin = true;

  IcedCoffeeScriptCompiler.prototype.type = 'javascript';

  IcedCoffeeScriptCompiler.prototype.generators = {
    backbone: {
      model: function(name) {
        return "module.exports = class " + (formatClassName(name)) + " extends Backbone.Model";
      },
      view: function(name) {
        return "template = require 'views/templates/" + name + "'\n\nmodule.exports = class " + (formatClassName(name)) + "View extends Backbone.View\n  template: template";
      }
    },
    chaplin: {
      controller: function(name) {
        return "Controller = require 'controllers/controller'\n" + (formatClassName(name)) + " = 'models/" + name + "'\n" + (formatClassName(name)) + "View = require 'views/" + name + "'\n\nmodule.exports = class " + (formatClassName(name)) + "Controller extends Controller\n  historyURL: ''";
      },
      model: function(name) {
        return "Model = require 'models/model'\n\nmodule.exports = class " + (formatClassName(name)) + " extends Model";
      },
      view: function(name) {
        return "View = require 'views/view'\ntemplate = require 'views/templates/" + name + "'\n\nmodule.exports = class " + (formatClassName(name)) + "View extends View\n  template: template";
      }
    }
  };

  function IcedCoffeeScriptCompiler(config) {
    var cfg, _ref, _ref1, _ref2;
    this.config = config;
    cfg = (_ref = (_ref1 = this.config.plugins) != null ? _ref1.icedCoffeeScript : void 0) != null ? _ref : {};
    this.extension = (_ref2 = cfg.extension) != null ? _ref2 : 'iced';
    null;
  }

  IcedCoffeeScriptCompiler.prototype.compile = function(data, path, callback) {
    var err, error, result;
    try {
      return result = iced.compile(data);
    } catch (_error) {
      err = _error;
      return error = err;
    } finally {
      callback(error, result);
    }
  };

  IcedCoffeeScriptCompiler.prototype.include = function() {
    return [sysPath.join(__dirname, '..', 'vendor', 'iced-coffee-script.js')];
  };

  return IcedCoffeeScriptCompiler;

})();

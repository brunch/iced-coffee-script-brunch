// Generated by CoffeeScript 1.6.3
var IcedCoffeeScriptCompiler, iced;

iced = require('iced-coffee-script');

module.exports = IcedCoffeeScriptCompiler = (function() {
  IcedCoffeeScriptCompiler.prototype.brunchPlugin = true;

  IcedCoffeeScriptCompiler.prototype.type = 'javascript';

  function IcedCoffeeScriptCompiler(config) {
    var cfg, _ref, _ref1, _ref2;
    this.config = config;
    cfg = (_ref = (_ref1 = this.config.plugins) != null ? _ref1.icedCoffeeScript : void 0) != null ? _ref : {};
    this.extension = (_ref2 = cfg.extension) != null ? _ref2 : 'iced';
    null;
  }

  IcedCoffeeScriptCompiler.prototype.compile = function(data, path, callback) {
    var compiled, err, error, options, result, _ref, _ref1, _ref2, _ref3;
    options = {
      bare: (_ref = this.config) != null ? (_ref1 = _ref.plugins) != null ? (_ref2 = _ref1.iced) != null ? _ref2.bare : void 0 : void 0 : void 0,
      sourceMap: Boolean((_ref3 = this.config) != null ? _ref3.sourceMaps : void 0),
      sourceFiles: [path],
      runtime: 'window'
    };
    try {
      return compiled = iced.compile(data, options);
    } catch (_error) {
      err = _error;
      return error = err.location != null ? "" + err.location.first_line + ":" + err.location.first_column + " " + (err.toString()) : err.toString();
    } finally {
      if (error != null) {
        return callback(error);
      }
      result = compiled && options.sourceMap ? {
        data: compiled.js,
        map: compiled.v3SourceMap
      } : {
        data: compiled
      };
      callback(error, result);
    }
  };

  return IcedCoffeeScriptCompiler;

})();
